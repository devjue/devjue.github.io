{"categories":[{"title":"web","uri":"https://devjue.github.io/categories/web/"}],"posts":[{"content":" 使用 GitHub 创建一个仓库，用于对 Hugo 博客的版本进行管理。有了 GitHub 仓库后，还可以在多终端（个人电脑、工作电脑等）上同时撰写博客。\n初始化本地仓库 $ cd /path/to/site/ $ git init $ git remote add origin git@github.com:yourname/yourblog.git  进入 Hugo 站点目录 /path/to/site/，初始化 git，并将 git@github.com:yourname/yourblog.git（这个仓库已经提前创建，且没有提交记录）设置为你的远程仓库。\n选择需要提交的文件 跟踪空目录 刚初始化的 Hugo 博客目录如下所示：\narchetypes/ default.md content/ data/ layouts/ static/ themes/  可见，除了 archetypes/，其它都是空目录。\n由于 git 只跟踪文件的变动，不跟踪目录。所以，即便使用 git add，没有文件的空目录也不会被提交到暂存区。针对这一点，如果想提交站点的完整结构，需要在空目录下添加文件，这个文件可以没有任何内容。有一个惯例做法是向想要提交的空目录中添加名为 .gitkeep 的空文件，此文件的作用只是让其所在的目录被提交。\n$ touch content/.gitkeep data/.gitkeep layouts/.gitkeep static/.gitkeep themes/.gitkeep  忽略 public/ 目录 由于 public/ 目录下的文件完全是由 Hugo 生成的，我们可以随时生成最新的内容，所以建议不提交该目录。\n$ echo \u0026quot;public/\u0026quot; \u0026gt;\u0026gt; .gitignore  在 .gitignore 中加入 public/，目录 public/ 及其路径下的所有文件将不会被提交。\n添加子模块 Hugo 中有很多主题可选，这为写博客带来了很大的便利及乐趣。这些主题大多是 GitHub 上的项目，如果我们想跟踪主题的更新，及时获取其最新版本，推荐将该主题的项目作为子模块添加到我们的博客项目中。还是以我选择的 主题 pure 为例：\n$ git submodule add git@github.com:xiaoheiAh/hugo-theme-pure.git themes/pure  提交到远程仓库 GitHub 最后，提交目录下的所有文件。\n$ git add -A $ git commit -m \u0026quot;init blog\u0026quot; $ git push -u origin master  克隆子模块 当我们使用 git clone git@github.com:yourname/yourblog.git 克隆项目时，子模块是不会被克隆的。下面介绍两个方法来克隆子模块。\n使用 git submodule 先克隆项目，再根据需要克隆子模块。\n$ git clone git@github.com:yourname/yourblog.git $ cd yourblog $ git submodule init $ git submodule update  使用 --recurse-submodules 在克隆项目时，就克隆其子模块。\n$ git clone git@github.com:yourname/yourblog.git --recurse-submodules   注意，当在新环境中使用 Hugo 生成静态站点时，需要先克隆作为子模块的 Hugo 主题。\n ","id":0,"section":"posts","summary":"使用 GitHub 创建一个仓库，用于对 Hugo 博客的版本进行管理。有了 GitHub 仓库后，还可以在多终端（个人电脑、工作电脑等）上同时撰写博客。 初始化本地仓库 $ cd /path/to/site/ $ git","tags":["git"],"title":"Hugo博客搭建之三：使用GitHub对博客版本进行管理","uri":"https://devjue.github.io/2019/12/hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B9%8B%E4%B8%89%E4%BD%BF%E7%94%A8github%E5%AF%B9%E5%8D%9A%E5%AE%A2%E7%89%88%E6%9C%AC%E8%BF%9B%E8%A1%8C%E7%AE%A1%E7%90%86/","year":"2019"},{"content":" 上一篇介绍了 Hugo 的安装，以及如何在 GitHub Page 上进行部署。这一篇将介绍如何在独立的服务器上部署站点。\n在服务器上部署站点，可以最大程度地自由发挥。首先，需要一台服务器，博客不需要太高的配置，入门级云服务器即可。然后，需要一个域名，这是您江湖上行走的ID，自己喜欢就好，不推荐暂时不能备案的（如 .org、.name 等）。此外，还需要 DNS 解析服务，有的域名商会在卖域名时附赠这项服务。总结一下，需要：\n 云服务器 域名 DNS 服务  Hugo 生成的是静态站点，推荐使用 nginx 作为博客的 web 服务器。\n下面，就开始部署吧。\n查看系统信息 $ cat /etc/redhat-release CentOS Linux release 7.5.1804 (Core) $ uname -r 3.10.0-862.el7.x86_64  安装 nginx 安装依赖 gcc-c++ 是 nginx 源码编译需要的 gcc 环境。\npcre、pcre-devel、zlib、zlib-devel、openssl、openssl-devel 是 nginx 源码编译依赖的库。\nyum -y install gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel  创建 nginx 用户 给 nginx 服务分配单独的用户进行操作，以隔离风险。\nuseradd nginx su nginx  安装 nginx 下载最新版本的 nginx 源码。配置 configure 参数，把 nginx 安装在 nginx 的用户目录 opt 下，并设置 worker 进程 的默认用户为 nginx 。\nmkdir $HOME/download $HOME/opt cd ~/download wget https://nginx.org/download/nginx-1.16.1.tar.gz tar zxf nginx-1.16.1.tar.gz cd nginx-1.16.1 ./configure --prefix=/home/nginx/opt/nginx --user=nginx make \u0026amp; make install  配置环境变量 为 nginx 设置用户的环境变量。首先，在用户根目录下创建 bin 目录，用于存放所有应用程序的软链接。再将 bin 目录加入 PATH，并立即生效。最后，在 bin 目录下创建 nginx 的软链接。\nmkdir $HOME/bin echo -e '\\nPATH=/home/nginx/bin:$PATH\\n' \u0026gt;\u0026gt; /home/nginx/.bash_profile source /home/nginx/.bash_profile ln -s /home/nginx/opt/nginx/sbin/nginx /home/nginx/bin  启动 nginx 非超级用户不能监听1024以下的端口。所以，需要让 nginx 监听 8080 端口，再让 firewall 将 80 端口 的流量转发至 8080 端口。\n编辑 nginx 配置文件 ... server { listen 8080; # 把80改为8080 ... } ...  设置端口转发 # 使用 root 用户操作，需要 root 权限 su root systemctl start firewalld.service firewall-cmd --add-forward-port=port=80:proto=tcp:toport=8080 --permanent firewall-cmd --reload  启动 nginx su nginx nginx  此时，浏览器打开，就能够看到 nginx 的欢迎页了。\n上传静态站点 将由 Hugo 生成的站点上传至服务器，推荐在 nginx 用户的根目录下，这样比较方便。关于如何使用 Hugo 生成静态站点，请查看上一篇。\n配置站点 再次编辑 nginx 的配置文件，设置站点域名、路由等。\nserver { listen 8080; server_name domain_name; # 博客域名 location / { root /path/to/site; # 博客站点的目录，注意要使用绝对路径 index index.html; } ... }  重新启动 nginx：\n$ nginx -s reload  此时，浏览器打开 服务器的 IP 地址，就能够看到您的博客首页了。\nDNS 解析 在 DNS 解析服务上，将 域名 指向 服务器的 IP 地址。浏览器打开 域名，就可以看到博客页面了。\n网站备案 注意，需要尽快进行网站备案，否则，很快就看不到您的网站了。\n软件版本 本文涉及到的软件版本如下：\n CentOS Linux release 7.5.1804 (Core) nginx 1.16.1 Hugo 0.60.1  参考 https://www.cnblogs.com/remyyoung/p/11244840.html\nhttps://www.cnblogs.com/boonya/p/7907999.html\n","id":1,"section":"posts","summary":"上一篇介绍了 Hugo 的安装，以及如何在 GitHub Page 上进行部署。这一篇将介绍如何在独立的服务器上部署站点。 在服务器上部署站点，可以最大程度地自由发挥。首先，","tags":["hugo","nginx"],"title":"Hugo博客搭建之二：部署在服务器上","uri":"https://devjue.github.io/2019/12/hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B9%8B%E4%BA%8C%E9%83%A8%E7%BD%B2%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/","year":"2019"},{"content":" 安装 Hugo mac 推荐使用 brew 进行安装：\n$ brew install hugo  windows 推荐从 GitHub 直接下载最新的稳定的二进制版本。然后，将其加入环境变量。\n源码安装 如果网络条件良好，也可以使用源码进行安装。因为 Hugo 是由 Go 语言编写的，所以需要 Go 语言环境。自从 Hugo 0.48 以后，Hugo 需要 Go 1.11 以上版本。把 Hugo 克隆在 GOPATH 的 src 目录下，并使用 Go 编译安装：\n$ mkdir $GOPATH/src $ cd $GOPATH/src $ git clone git@github.com:gohugoio/hugo.git $ cd hugo $ go install  生成的 hugo 可执行文件在 GOPATH/bin/ 目录下。\n生成站点 使用 hugo new site 命令生成新的站点，/path/to/site 是新站点的目录。\n$ hugo new site /path/to/site  创建文章 创建第一篇文章：\n$ cd /path/to/site $ hugo new post/hello_world.md  hello_world.md 会出现在 /path/to/site/content/post/ 目录下。\n安装皮肤 Hugo官网 有很多主题可供选择。选择您最喜欢的一款，下载到本地 theme 目录下。推荐使用 git clone 克隆项目，方便以后更新主题。但如果考虑到以后需要使用 GitHub 对博客版本进行管理，更推荐使用 git submodule add 将主题项目作为子模块添加。这部分不是本文讨论的重点，如果感兴趣，可以阅读《Hugo博客搭建之三：使用 GitHub 对博客版本进行管理》了解更多。本文还是介绍使用 git clone 克隆项目的方法。例如，我选择的是 pure :\n$ git clone git@github.com:xiaoheiAh/hugo-theme-pure.git themes/pure  运行 Hugo 使用 hugo server 启动 Hugo。\n$ hugo server -t pure -D   -t（--theme）指定主题名称，pure 是我们刚下载的主题的名字，如果您下载的是其它主题，则使用 theme 目录下该主题的名字。 -D（--buildDrafts）指生成包括被标记为 draft 的文章。文章在由 hugo new 命令生成后，没有进行任何编辑前，都被标记为 draft。如下所示，在新文章的头部：\n--- ... draft: true ---   刚才我们生成的第一篇文章 hello_world.md 也是被标记为 draft 的文章，如果启动 Hugo 时没有参数 -D，浏览器将不会显示任何文章。\n浏览器打开：http://localhost:1313。\n部署 Hugo 由于 Hugo 生成的是静态网站，所以可以部署在 GitHub Page 上。当然，它也可以部署在独立的服务器上。\n在 GitHub Page 上部署的好处是免费、操作简单，但访问速度有时候可能比较慢。可以使用默认域名，形如 yourname.github.io，也可以使用自己的域名。注意，下文出现的所有 yourname 都与此处一致。\n在独立的服务器上部署会比前者麻烦，并且需要一点服务器操作经验，但其容量、访问速度等限制都取决于服务器本身。此外，只能使用自己的域名。\n本篇文章将介绍在 GitHub Page 上部署站点，下一篇将介绍在独立的服务器上部署站点。\n创建 GitHub 仓库 首先，在 GitHub 上创建形如 yourname.github.io 的仓库。如下图所示（在此使用 devjue 作为 yourname ）：\n生成静态页面 在本地 /path/to/site 目录下，执行 hugo 命令：\n$ cd /path/to/site $ hugo -t pure -b \u0026quot;https://yourname.github.io/\u0026quot;   -b（--baseUrl）指定站点域名。   注意，以上命令不会生成被标记为 draft 的文章。\n 此时，Hugo 已经将所有的静态页面创建在 public 目录下。\n初始化仓库 在本地 /path/to/site/public 目录下，初始化仓库：\n$ cd /path/to/site/public $ git init $ git remote add origin git@github.com:yourname/yourname.github.io.git $ git add README.md $ git commit -m \u0026quot;init blog\u0026quot; $ git push -u origin master  如果一切顺利，浏览器打开 https://yourname.github.io/ ，就会看到您的站点了。\n软件版本 本文涉及到的软件版本如下：\n macOS Catalina 10.15.1 Windows 10 专业版 Hugo 0.60.1 hugo-theme-pure master at 2019/12/05  参考 https://www.gohugo.org/\nhttps://gohugo.io/getting-started/quick-start/\nhttps://pages.github.com/\n","id":2,"section":"posts","summary":"安装 Hugo mac 推荐使用 brew 进行安装： $ brew install hugo windows 推荐从 GitHub 直接下载最新的稳定的二进制版本。然后，将其加入环境变量。 源码安装 如果网络条件良好，也可以使用源","tags":["hugo"],"title":"Hugo博客搭建之一：部署在GitHub Page上","uri":"https://devjue.github.io/2019/12/hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B9%8B%E4%B8%80%E9%83%A8%E7%BD%B2%E5%9C%A8github-page%E4%B8%8A/","year":"2019"}],"tags":[{"title":"git","uri":"https://devjue.github.io/tags/git/"},{"title":"hugo","uri":"https://devjue.github.io/tags/hugo/"},{"title":"nginx","uri":"https://devjue.github.io/tags/nginx/"}]}